{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\n\n/**\r\n * Custom hook to detect when an element enters the viewport.\r\n * This is used to trigger entry animations (like fade-in or slide-up).\r\n * * @param {number} threshold - A value between 0 and 1 indicating how much of the target \r\n * should be visible before the callback is invoked.\r\n * @returns {Array} [ref, isVisible] - A ref to attach to the target element and a boolean state.\r\n */\nconst useScrollAnimation = (threshold = 0.1) => {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    // Check if the Intersection Observer API is available\n    if (typeof window.IntersectionObserver === 'undefined') {\n      setIsVisible(true); // Fallback: show content immediately if not supported\n      return;\n    }\n    const observer = new IntersectionObserver(([entry]) => {\n      // Only trigger once when the element first becomes visible\n      if (entry.isIntersecting) {\n        setIsVisible(true);\n        observer.unobserve(entry.target);\n      }\n    }, {\n      root: null,\n      // relative to the viewport\n      rootMargin: '0px',\n      threshold: threshold\n    });\n    const currentRef = ref.current;\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef);\n      }\n    };\n  }, [threshold]);\n  return [ref, isVisible];\n};\n_s(useScrollAnimation, \"7N8EcRPlcY6o9kzg5IgMZgWhyLI=\");\nexport default useScrollAnimation;","map":{"version":3,"names":["useEffect","useRef","useState","useScrollAnimation","threshold","_s","isVisible","setIsVisible","ref","window","IntersectionObserver","observer","entry","isIntersecting","unobserve","target","root","rootMargin","currentRef","current","observe"],"sources":["C:/lucidt-demo/src/hooks/useScrollAnimation.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\n/**\r\n * Custom hook to detect when an element enters the viewport.\r\n * This is used to trigger entry animations (like fade-in or slide-up).\r\n * * @param {number} threshold - A value between 0 and 1 indicating how much of the target \r\n * should be visible before the callback is invoked.\r\n * @returns {Array} [ref, isVisible] - A ref to attach to the target element and a boolean state.\r\n */\r\nconst useScrollAnimation = (threshold = 0.1) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const ref = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Check if the Intersection Observer API is available\r\n    if (typeof window.IntersectionObserver === 'undefined') {\r\n        setIsVisible(true); // Fallback: show content immediately if not supported\r\n        return;\r\n    }\r\n\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // Only trigger once when the element first becomes visible\r\n        if (entry.isIntersecting) {\r\n          setIsVisible(true);\r\n          observer.unobserve(entry.target);\r\n        }\r\n      },\r\n      {\r\n        root: null, // relative to the viewport\r\n        rootMargin: '0px',\r\n        threshold: threshold,\r\n      }\r\n    );\r\n\r\n    const currentRef = ref.current;\r\n\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [threshold]);\r\n\r\n  return [ref, isVisible];\r\n};\r\n\r\nexport default useScrollAnimation;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGA,CAACC,SAAS,GAAG,GAAG,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMM,GAAG,GAAGP,MAAM,CAAC,IAAI,CAAC;EAExBD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,OAAOS,MAAM,CAACC,oBAAoB,KAAK,WAAW,EAAE;MACpDH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpB;IACJ;IAEA,MAAMI,QAAQ,GAAG,IAAID,oBAAoB,CACvC,CAAC,CAACE,KAAK,CAAC,KAAK;MACX;MACA,IAAIA,KAAK,CAACC,cAAc,EAAE;QACxBN,YAAY,CAAC,IAAI,CAAC;QAClBI,QAAQ,CAACG,SAAS,CAACF,KAAK,CAACG,MAAM,CAAC;MAClC;IACF,CAAC,EACD;MACEC,IAAI,EAAE,IAAI;MAAE;MACZC,UAAU,EAAE,KAAK;MACjBb,SAAS,EAAEA;IACb,CACF,CAAC;IAED,MAAMc,UAAU,GAAGV,GAAG,CAACW,OAAO;IAE9B,IAAID,UAAU,EAAE;MACdP,QAAQ,CAACS,OAAO,CAACF,UAAU,CAAC;IAC9B;IAEA,OAAO,MAAM;MACX,IAAIA,UAAU,EAAE;QACdP,QAAQ,CAACG,SAAS,CAACI,UAAU,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,CAACd,SAAS,CAAC,CAAC;EAEf,OAAO,CAACI,GAAG,EAAEF,SAAS,CAAC;AACzB,CAAC;AAACD,EAAA,CAxCIF,kBAAkB;AA0CxB,eAAeA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}